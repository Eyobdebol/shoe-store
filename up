// NEW AUTHENTICATION SYSTEM
class AuthManager {
    // Constructor runs once when the class is created
    constructor() {
        // Load all registered users from localStorage or start with empty list
        this.users = JSON.parse(localStorage.getItem('financeUsers')) || [];
        
        // No user is logged in at first
        this.currentUser = null;
        
        // Start the authentication system (check for saved session, set event listeners)
        this.initAuth();
    }
    
    // Initialize authentication
    initAuth() {
        // Check if there is a user session saved in localStorage
        const session = JSON.parse(localStorage.getItem('currentFinanceUser'));
        
        if (session) {
            
            const user = this.users.find(u => u.email === session.email);
            
            if (user) {
                
                this.currentUser = user;
                this.showApp();
            }
        }
        
        // Set event listeners for buttons: switch forms, login, signup, logout
        document.getElementById('showSignup').addEventListener('click', () => this.toggleAuthForms());
        document.getElementById('showLogin').addEventListener('click', () => this.toggleAuthForms());
        document.getElementById('loginBtn').addEventListener('click', (e) => this.handleLogin(e));
        document.getElementById('signupBtn').addEventListener('click', (e) => this.handleSignup(e));
        document.getElementById('logoutBtn').addEventListener('click', () => this.handleLogout());
    }
    
    // Switch between Login and Signup forms
    toggleAuthForms() {
        // Toggle the 'hidden' class to show/hide forms
        document.getElementById('loginForm').classList.toggle('hidden');
        document.getElementById('signupForm').classList.toggle('hidden');
    }
    
    // Handle login form submission
    handleLogin(e) {
        e.preventDefault(); // Prevent page refresh
        
        // Get email and password input from login form
        const email = document.getElementById('loginEmail').value;
        const password = document.getElementById('loginPassword').value;
        
        // Find user that matches email and password
        const user = this.users.find(u => u.email === email && u.password === password);
        
        if (!user) {
            alert('Invalid email or password');
            return; // Stop if no user found
        }
        
        // save session to localStorage
        this.currentUser = user;
        localStorage.setItem('currentFinanceUser', JSON.stringify({ email: user.email }));
        
        // Show the main app after successful login
        this.showApp();
    }
    
    // Handle signup form submission
    handleSignup(e) {
        e.preventDefault(); // Prevent page refresh
        
        // Get input values from signup form
        const name = document.getElementById('signupName').value;
        const email = document.getElementById('signupEmail').value;
        const password = document.getElementById('signupPassword').value;
        const confirmPassword = document.getElementById('signupConfirmPassword').value;
        
        // Validate password match
        if (password !== confirmPassword) {
            alert("Passwords don't match");
            return;
        }
        
        // Validate password length
        if (password.length < 6) {
            alert("Password must be at least 6 characters");
            return;
        }
        
        // Check if email is already registered
        if (this.users.some(u => u.email === email)) {
            alert("Email already in use");
            return;
        }
        
        // Create new user object with empty transactions list
        const newUser = {
            name,
            email,
            password,
            transactions: []
        };
        
        // Add new user to users list and set as current user
        this.users.push(newUser);
        this.currentUser = newUser;
        
        // Save users and current session in localStorage
        localStorage.setItem('financeUsers', JSON.stringify(this.users));
        localStorage.setItem('currentFinanceUser', JSON.stringify({ email: newUser.email }));
        
        // Show main app after signup
        this.showApp();
    }
    
    // Logout current user
    handleLogout() {
        this.currentUser = null;
        localStorage.removeItem('currentFinanceUser'); // Remove saved session
        
        // Show login/signup forms again
        this.showAuth();
    }
    
    // Show the main finance app UI and load user's transactions
    showApp() {
        // Hide authentication forms and show app content
        document.getElementById('authContainer').classList.add('hidden');
        document.getElementById('appContent').classList.remove('hidden');
        
        // Display current user's name
        document.getElementById('userName').textContent = this.currentUser.name;
        
        // Initialize finance tracker with current user's transactions
        if (window.financeTracker) {
            window.financeTracker.transactions = this.currentUser.transactions.map(t => 
                new Transaction(t.type, t.category, t.amount, t.description, t.date)
            );
            window.financeTracker.renderTransactions(); // Show transactions list
            window.financeTracker.updateBalance();      // Update balance display
            window.financeTracker.updateChart();        // Refresh chart
        }
    }
    
    // Show the login/signup UI and clear form fields
    showAuth() {
        document.getElementById('authContainer').classList.remove('hidden');
        document.getElementById('appContent').classList.add('hidden');
        document.getElementById('loginForm').classList.remove('hidden');
        document.getElementById('signupForm').classList.add('hidden');
        
        // Clear all input fields for fresh start
        document.getElementById('loginEmail').value = '';
        document.getElementById('loginPassword').value = '';
        document.getElementById('signupName').value = '';
        document.getElementById('signupEmail').value = '';
        document.getElementById('signupPassword').value = '';
        document.getElementById('signupConfirmPassword').value = '';
    }
    
    // Save the current user's transactions to localStorage
    saveTransactions(transactions) {
        if (!this.currentUser) return; // No current user, do nothing
        
        // Find user index in users array
        const userIndex = this.users.findIndex(u => u.email === this.currentUser.email);
        
        if (userIndex !== -1) {
            // Update transactions for that user
            this.users[userIndex].transactions = transactions;
            
            // Save updated users array to localStorage
            localStorage.setItem('financeUsers', JSON.stringify(this.users));
            
            // Update current user's transactions in memory
            this.currentUser.transactions = transactions;
        }
    }
}

// A simple class to represent one financial transaction
class Transaction {
    constructor(type, category, amount, description, date) {
        this.type = type;                   // Income or Expense
        this.category = category;           // Category like Food, Salary
        this.amount = parseFloat(amount);  // Convert string amount to number
        this.description = description;    // Description text
        this.date = date;                   // Date string
        this.id = Date.now().toString();   // Unique ID based on timestamp
    }
    
    // Format amount as currency string, e.g. $100.00
    get formattedAmount() {
        return `$${this.amount.toFixed(2)}`;
    }
    
    // Format date in readable format, e.g. 8/4/2025
    get formattedDate() {
        return new Date(this.date).toLocaleDateString();
    }
}
class FinanceTracker {
    // Constructor initializes the app data and starts the app
    constructor() {
        this.transactions = []; // This will hold all income and expense records
        
        // Categories split into income and expense groups
        this.categories = {
            income: ['Salary', 'Freelance', 'Investments', 'Gifts', 'Other'],
            expense: ['Food', 'Transport', 'Housing', 'Entertainment', 'Healthcare', 'Other']
        };
        
        // Load any saved transactions from storage
        this.loadTransactions();
        
        // Start app initialization
        this.init();
    }
    
    // Initialize the app features and UI
    init() {
        this.setupEventListeners(); // Listen for user actions like form submit or dropdown change
        this.renderCategories();     // Show categories based on selected transaction type
        this.renderTransactions();   // Display saved transactions on the page
        this.updateBalance();        // Calculate and show current balance
        this.fetchExchangeRate();    // Fetch latest currency exchange rates (bonus feature)
        this.initChart();            // Set up the pie chart visualization
    }
    
    // Save current transactions to storage (localStorage or user-specific storage)
    saveTransactions() {
        if (window.authManager) {
            // Save transactions linked to logged-in user
            window.authManager.saveTransactions(this.transactions);
        } else {
            // Save transactions for guest user in localStorage
            localStorage.setItem('transactions', JSON.stringify(this.transactions));
        }
    }
    
    // Load transactions from storage depending on whether user is logged in or not
    loadTransactions() {
        if (window.authManager && window.authManager.currentUser) {
            // Load transactions belonging to logged-in user and recreate Transaction objects
            this.transactions = window.authManager.currentUser.transactions.map(t => {
                return new Transaction(t.type, t.category, t.amount, t.description, t.date);
            }) || [];
        } else {
            // Load transactions from localStorage if no logged-in user
            const storedTransactions = localStorage.getItem('transactions');
            if (storedTransactions) {
                this.transactions = JSON.parse(storedTransactions).map(t => {
                    return new Transaction(t.type, t.category, t.amount, t.description, t.date);
                });
            }
        }
    }
    
    // Display category options depending on whether the user selects Income or Expense
    renderCategories() {
        const categorySelect = document.getElementById('category');
        categorySelect.innerHTML = '<option value="">Select a category</option>'; // Clear previous options
        
        const type = document.getElementById('type').value; // Get selected type
        
        if (type) {
            // Loop through categories and add options dynamically to dropdown
            this.categories[type].forEach(category => {
                const option = document.createElement('option');
                option.value = category;
                option.textContent = category;
                categorySelect.appendChild(option);
            });
        }
    }
    
    // Show recent transactions on the page
    renderTransactions() {
        const transactionsContainer = document.getElementById('transactions');
        transactionsContainer.innerHTML = ''; // Clear existing content
        
        // If no transactions, show message
        if (this.transactions.length === 0) {
            transactionsContainer.innerHTML = '<p>No transactions yet. Add one above!</p>';
            return;
        }
        
        // Sort transactions by date, show most recent 5
        const recentTransactions = [...this.transactions]
            .sort((a, b) => new Date(b.date) - new Date(a.date))
            .slice(0, 5);
        
        // Create HTML for each transaction and append to container
        recentTransactions.forEach(transaction => {
            const transactionEl = document.createElement('div');
            transactionEl.className = `transaction ${transaction.type}`; // Style by type (income/expense)
            transactionEl.innerHTML = `
                <div>
                    <strong>${transaction.description}</strong>
                    <small>${transaction.category} • ${transaction.formattedDate}</small>
                </div>
                <div>${transaction.formattedAmount}</div>
            `;
            transactionsContainer.appendChild(transactionEl);
        });
    }
    
    // Calculate and display the current balance (income minus expenses)
    updateBalance() {
        // Use reduce to sum income and subtract expenses
        const balance = this.transactions.reduce((total, transaction) => {
            return transaction.type === 'income' ? 
                total + transaction.amount : 
                total - transaction.amount;
        }, 0);
        
        // Update the balance display element with formatted value
        const balanceElement = document.getElementById('currentBalance');
        balanceElement.textContent = `$${balance.toFixed(2)}`;
        
        // Change color to green if positive balance, red if negative
        balanceElement.style.color = balance >= 0 ? '#4CAF50' : '#F44336';
    }
    
    // Initialize the Chart.js chart to visualize income vs expenses by category
    initChart() {
        this.ctx = document.getElementById('financeChart').getContext('2d');
        this.updateChart(); // Draw chart first time
    }
    
    // Update and redraw the chart whenever transactions change
    updateChart() {
        // Destroy old chart to avoid duplicates
        if (this.chart) {
            this.chart.destroy();
        }
        
        // Prepare data grouped by category for income and expenses
        const incomeByCategory = {};
        const expenseByCategory = {};
        
        // Initialize all categories with 0 amount
        this.categories.income.forEach(cat => incomeByCategory[cat] = 0);
        this.categories.expense.forEach(cat => expenseByCategory[cat] = 0);
        
        // Sum amounts for each category
        this.transactions.forEach(transaction => {
            if (transaction.type === 'income') {
                incomeByCategory[transaction.category] += transaction.amount;
            } else {
                expenseByCategory[transaction.category] += transaction.amount;
            }
        });
        
        // Create the doughnut chart with the summed data
        this.chart = new Chart(this.ctx, {
            type: 'doughnut',
            data: {
                labels: [...Object.keys(incomeByCategory), ...Object.keys(expenseByCategory)],
                datasets: [
                    {
                        label: 'Income',
                        data: Object.values(incomeByCategory),
                        backgroundColor: ['#4CAF50', '#81C784', '#A5D6A7', '#C8E6C9', '#E8F5E9'],
                        borderWidth: 1
                    },
                    {
                        label: 'Expenses',
                        data: Object.values(expenseByCategory),
                        backgroundColor: ['#F44336', '#E57373', '#EF9A9A', '#FFCDD2', '#FFEBEE'],
                        borderWidth: 1
                    }
                ]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: { position: 'top' },
                    title: { display: true, text: 'Income vs Expenses by Category' }
                }
            }
        });
    }
    
    // Fetch the latest USD to EUR exchange rate from an external API
    async fetchExchangeRate() {
        try {
            const response = await fetch('https://api.exchangerate-api.com/v4/latest/USD');
            if (!response.ok) throw new Error('Failed to fetch exchange rate');
            
            const data = await response.json();
            const rate = data.rates.EUR;
            
            // Display the fetched exchange rate on the page
            document.getElementById('exchangeRate').textContent = `1 USD = ${rate.toFixed(4)} EUR`;
        } catch (error) {
            console.error('Error fetching exchange rate:', error);
            
            // Show error message if API fails
            document.getElementById('exchangeRate').textContent = 'Exchange rate unavailable';
        }
    }
    
    // Setup all event listeners to handle user actions on the page
    setupEventListeners() {
        // When transaction type changes, update the category dropdown options
        document.getElementById('type').addEventListener('change', () => {
            this.renderCategories();
        });
        
        // When the transaction form is submitted, add new transaction
        document.getElementById('transactionForm').addEventListener('submit', (e) => {
            e.preventDefault();
            this.handleFormSubmit();
        });
        
        // When user clicks “Clear All,” remove all transactions with confirmation
        document.getElementById('clearAll').addEventListener('click', () => {
            if (confirm('Are you sure you want to delete all transactions?')) {
                this.transactions = [];
                this.saveTransactions();
                this.renderTransactions();
                this.updateBalance();
                this.updateChart();
            }
        });
        
        // Validate description input live, show error if invalid characters used
        document.getElementById('description').addEventListener('input', (e) => {
            const descError = document.getElementById('descError');
            if (!/^[a-zA-Z0-9\s.,'-]{1,50}$/.test(e.target.value)) {
                descError.textContent = 'Description can only contain letters, numbers, and basic punctuation (max 50 chars)';
                descError.classList.remove('hidden');
            } else {
                descError.classList.add('hidden');
            }
        });
        
        // Validate amount input live, show error if format is wrong
        document.getElementById('amount').addEventListener('input', (e) => {
            const amountError = document.getElementById('amountError');
            if (!/^\d+(\.\d{1,2})?$/.test(e.target.value)) {
                amountError.textContent = 'Please enter a valid amount (e.g., 10 or 10.50)';
                amountError.classList.remove('hidden');
            } else {
                amountError.classList.add('hidden');
            }
        });
    }
    
    // Process form data, create a new transaction, update UI and storage
    handleFormSubmit() {
        // Get values from form inputs
        const type = document.getElementById('type').value;
        const category = document.getElementById('category').value;
        const amount = document.getElementById('amount').value;
        const description = document.getElementById('description').value;
        const date = document.getElementById('date').value;
        
        // Validate all fields are filled
        if (!type || !category || !amount || !description || !date) {
            alert('Please fill in all fields');
            return;
        }
        
        // Create a new Transaction object and add it to transactions array
        const transaction = new Transaction(type, category, amount, description, date);
        this.transactions.push(transaction);
        
        // Save transactions, update display and chart
        this.saveTransactions();
        this.renderTransactions();
        this.updateBalance();
        this.updateChart();
        
        // Reset form for next entry
        document.getElementById('transactionForm').reset();
        document.getElementById('category').innerHTML = '<option value="">Select a category</option>';
    }
}
